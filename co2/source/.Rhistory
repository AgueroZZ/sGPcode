#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(aghq)
library(TMB)
library(Matrix)
library(xml2)
library(tidyverse)
library(mvQuad)
library(fda)
library(LaplacesDemon)
library(mvtnorm)
library(OSplines)
source(paste0(source_path, "05_functions_seasonal.R"))
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(aghq)
library(TMB)
library(Matrix)
library(xml2)
library(tidyverse)
library(mvQuad)
library(fda)
library(LaplacesDemon)
library(mvtnorm)
library(OSplines)
source(paste0(source_path, "05_functions_seasonal.R"))
load("/Users/ziangzhang/Documents/GitHub/seasonal-spline/application/CO2/v9/results/samps/1_hyper_sample.rda")
View(hyper_result)
hyper_result$marginals[[1]]
hyper_result
which_index <- 1
prec_marg <- hyper_result[[which_index]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
logpostsigma <- aghq::compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
hyper_dist <- data.frame(SD = logpostsigma$transparam,
density = logpostsigma$pdf_transparam)
hyper_dist
nsamps <- 3000
hyper_samps <- sample(x = hyper_dist$SD, size = nsamps, prob = hyper_dist$density)
hyper_samps <- sample(x = hyper_dist$SD, size = nsamps, prob = hyper_dist$density, replace = T)
hyper_samps
### Simulate n samples of SD given hyper_result list:
simulate_hyper <- function(hyper_result, nsamps = 3000, which_index = 1){
prec_marg <- hyper_result[[which_index]]
logpostsigma <- aghq::compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
hyper_dist <- data.frame(SD = logpostsigma$transparam,
density = logpostsigma$pdf_transparam)
hyper_samps <- sample(x = hyper_dist$SD, size = nsamps, prob = hyper_dist$density, replace = T)
hyper_samps
}
sam <- simulate_hyper(hyper_result = hyper_result, which_index = 1)
hit
hist(sam)
