mod_pred <- data.frame(timeYears = x_full, lower = apply(M2_pred, 1, quantile, probs = 0.1),
med = apply(M2_pred, 1, quantile, probs = 0.5),
mean = apply(M2_pred, 1, mean),
upper = apply(M2_pred, 1, quantile, probs = 0.9))
mod_pred$timeYears = observed_dataset$day
png(filename = "fit_M2.png", width = 800, height = 600)
plot(mod_pred$med ~ mod_pred$timeYears,
type = "l", col = "blue", lwd = 1,
xlab = "Years",
ylab = "CO2 concentration", ylim = c(200, 620),
cex.lab = 1.5, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.5)
lines(mod_pred$lower ~ mod_pred$timeYears, col = "red", lwd = 1, lty = 2)
lines(mod_pred$upper ~ mod_pred$timeYears, col = "red", lwd = 1, lty = 2)
points(observed_dataset$day, observed_dataset$co2,
pch = 16, col = "black", cex = 0.2)
abline(v = max(train_dataset$day), col = "purple", lty = "dashed")
dev.off()
pdf(file = "fit_M2.pdf", width = 8, height = 6)
plot(mod_pred$med ~ mod_pred$timeYears,
type = "l", col = "blue", lwd = 1,
xlab = "Years",
ylab = "CO2 concentration", ylim = c(200, 620),
cex.lab = 1.5, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.5)
lines(mod_pred$lower ~ mod_pred$timeYears, col = "red", lwd = 1, lty = 2)
lines(mod_pred$upper ~ mod_pred$timeYears, col = "red", lwd = 1, lty = 2)
points(observed_dataset$day, observed_dataset$co2,
pch = 16, col = "black", cex = 0.2)
abline(v = max(train_dataset$day), col = "purple", lty = "dashed")
dev.off()
### Compute training MSE and CPR
mod_pred_train <- mod_pred %>% filter(timeYears <= max(train_dataset$day))
sqrt(mean((mod_pred_train$mean - train_dataset$co2)^2))
# 0.6054007
mean((mod_pred_train$lower <= train_dataset$co2) & (train_dataset$co2 <= mod_pred_train$upper))
# 0.8214286
### Compute test rMSE and CPR
mod_pred_test <- mod_pred %>% filter(timeYears > max(train_dataset$day))
test_data <- observed_dataset %>% filter(timeYears > max(train_dataset$timeYears))
sqrt(mean((mod_pred_test$mean - test_data$co2)^2))
# 43.85931
mean((mod_pred_test$lower <= test_data$co2) & (test_data$co2 <= mod_pred_test$upper))
# 0.995687
summary(mod_full)
set.seed(123)
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(tidyverse)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
x <- data$x
y <- data$y
data_reduced <- data[1:80,]
### Region of prediction
region_lynx <- c(1821,1960)
### Define a prior on 50-years predictive SD:
pred_SD <- list(u = 0.5, alpha = 0.01)
results_sGP <- BayesGP::model_fit(
formula = y ~ f(x = year, model = "sgp", k = 100,
period = 10,
sd.prior = list(param = pred_SD, h = 50),
initial_location = "left", region = region_lynx) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))),
data = data_reduced,
family = "poisson")
### Forecast
pred_g1 <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T)
pred_g1 <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T)
plot(pred_g1$mean ~ pred_g1$year, type = 'l', col = "blue", ylim = c(0,12))
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
pred_g1_samps <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T, only.samples = T)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
pdf(file = paste0(figure_path, "lynx_log_predict.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
set.seed(123)
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(tidyverse)
library(BayesGP)
library(sGPfit)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
x <- data$x
y <- data$y
data_reduced <- data[1:80,]
### Region of prediction
region_lynx <- c(1821,1960)
### Define a prior on the marginal SD:
pred_SD <- list(u = 0.5, alpha = 0.01)
p1 <- 10
## Forecast using the comparison
Customized_RE1 <- list()
Customized_RE1$compute_B <- function(x){
B <- Compute_B_B(x = x, k = 300, region = region_lynx, boundary = F, order = 4)
return(B)
}
Customized_RE1$compute_P <- function(x, const){
kappa1 = 2*pi/p1 + const
theta1 = 2*asin(2*pi/(kappa1*p1))/pi
scaling = sqrt(4 * cos(pi*theta1/2)*(kappa1^3))
Prec <- (1/(scaling^2))*sGPfit:::Compute_Q_B_compare(k = 300, kappa = kappa1, theta = theta1, order = 4, simp = F, region = region_lynx, boundary = F)
return(as(Prec, "matrix"))
}
results_const <- BayesGP::model_fit_loop(
loop_holder = "const",
loop_values = seq(0.001, 0.03, length.out = 20),
formula = y ~ f(x = year, model = "customized", sd.prior = list(param = pred_SD)) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))) ,
data = data_reduced,
family = "poisson",
Customized_RE = Customized_RE1)
results_const
save(results_const, file = paste0("results_const.rda"))
plot(results_const$var, results_const$post, type = "o", xlab = "const", ylab = "post")
const_max = results_const$var[which.max(results_const$post)]
load("results_const.rda")
plot(results_const$var, results_const$post, type = "o", xlab = "const", ylab = "post")
const_max = results_const$var[which.max(results_const$post)]
### Fit model:
fit_comparison_once <- function(const){
data_reduced2 <- data_reduced
kappa1 = 2*pi/p1 + const
theta1 = 2*asin(2*pi/(kappa1*p1))/pi
scaling = sqrt(4 * cos(pi*theta1/2)*(kappa1^3))
Customized_RE1 <- list()
Customized_RE1$compute_B <- function(x){
B <- Compute_B_B(x = x, k = 300, region = region_lynx, boundary = F, order = 4)
return(B)
}
Customized_RE1$compute_P <- function(x, kappa = kappa1, theta = theta1){
Prec <- (1/(scaling^2)) * sGPfit:::Compute_Q_B_compare(k = 300, kappa = kappa, theta = theta, order = 4, simp = F, region = region_lynx, boundary = F)
return(as(Prec, "matrix"))
}
results <- BayesGP::model_fit(
formula = y ~ f(x = year, model = "customized", sd.prior = list(param = pred_SD)) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))) ,
data = data_reduced2,
family = "poisson",
Customized_RE = Customized_RE1)
results
}
results_compare <- fit_comparison_once(const_max)
summary(results_compare)
year_vec <- data$year
full_design <- cbind(Customized_RE1$compute_B(x = year_vec), 1)
full_samps <- (full_design %*% results_compare$samps$samps[c(results_compare$random_samp_indexes$year, results_compare$fixed_samp_indexes$intercept), ])
full_summary <- list()
full_summary$year = year_vec
full_summary$mean <- (full_samps) %>% apply(1, mean)
full_summary$q0.5 <- (full_samps) %>% apply(1, median)
full_summary$q0.975 <- (full_samps) %>% apply(1, quantile, probs = 0.975)
full_summary$q0.025 <- (full_samps) %>% apply(1, quantile, probs = 0.025)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
# lines(q0.5~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(mean~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = full_summary, col = 'red', lty = "dashed")
lines(q0.025~year, data = full_summary, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(q0.5~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = full_summary, col = 'red', lty = "dashed")
lines(q0.025~year, data = full_summary, col = 'red', lty = "dashed")
pdf(file = paste0(figure_path, "lynx_log_predict_compare.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
# lines(q0.5~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(mean~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = full_summary, col = 'red', lty = "dashed")
lines(q0.025~year, data = full_summary, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
### MSE and rMSE:
test_data <- data[-c(1:80),]
mean((test_data$logy - full_summary$mean[-c(1:80)])^2)
# 1.341368
sqrt(mean((test_data$logy - full_summary$mean[-c(1:80)])^2))
# 1.158174
mean(abs((test_data$logy - full_summary$mean[-c(1:80)])))
# 0.9688789
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
# lines(q0.5~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(q0.5~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
### Overall (Log):
pdf(file = paste0(figure_path, "lynx_log_predict.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
# lines(q0.5~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
pdf(file = paste0(figure_path, "lynx_predict_samps.pdf"), height = 5, width = 5)
plot(y~year, log='y' ,data = data, type = 'p', xlab = "year", ylab = "lynx", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(5,50000) ) #ylim = c(0,15))
matlines(y = exp(pred_g1_samps[,2:102]), x = data$year, col = "#FF000010", lty = 1)
Nshow = 4
matlines(y = exp(pred_g1_samps[,seq(1,Nshow)]), x = data$year,
col = paste0(RColorBrewer::brewer.pal(Nshow,'Dark2'),"99"),
lty = 1)
dev.off()
### Overall:
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1], med = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.5), q0.025 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.025), q0.975 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
plot(y~year, data = data, type = 'p',
log = "y", ylim = c(1, 160000),
xlab = "year", ylab = "lynx", xlim = c(1820,1971),
lwd = 0.5, cex = 0.2)
lines(pred_g1$med ~ pred_g1$year, type = 'l', col = "blue")
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
### MSE rMSE MAE:
test_data <- data[-c(1:80),]
mean((test_data$logy -pred_g1$med[-c(1:80)])^2)
# 1.249357
sqrt(mean((test_data$logy -pred_g1$med[-c(1:80)])^2))
# 1.117746
mean(abs(test_data$logy -pred_g1$med[-c(1:80)]))
# 0.903645
set.seed(123)
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(tidyverse)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
x <- data$x
y <- data$y
data_reduced <- data[1:80,]
### Region of prediction
region_lynx <- c(1821,1960)
### Define a prior on 50-years predictive SD:
pred_SD <- list(u = 0.5, alpha = 0.01)
results_sGP <- BayesGP::model_fit(
formula = y ~ f(x = year, model = "sgp", k = 100,
period = 10,
sd.prior = list(param = pred_SD, h = 50),
initial_location = "left", region = region_lynx) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))),
data = data_reduced,
family = "poisson")
### Forecast
pred_g1 <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T)
plot(pred_g1$mean ~ pred_g1$year, type = 'l', col = "blue", ylim = c(0,12))
# plot(pred_g1$q0.5 ~ pred_g1$year, type = 'l', col = "blue", ylim = c(0,12))
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
pred_g1_samps <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T, only.samples = T)
### Overall (Log):
pdf(file = paste0(figure_path, "lynx_log_predict.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
# lines(q0.5~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
pdf(file = paste0(figure_path, "lynx_predict_samps.pdf"), height = 5, width = 5)
plot(y~year, log='y' ,data = data, type = 'p', xlab = "year", ylab = "lynx", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(5,50000) ) #ylim = c(0,15))
matlines(y = exp(pred_g1_samps[,2:102]), x = data$year, col = "#FF000010", lty = 1)
Nshow = 4
matlines(y = exp(pred_g1_samps[,seq(1,Nshow)]), x = data$year,
col = paste0(RColorBrewer::brewer.pal(Nshow,'Dark2'),"99"),
lty = 1)
dev.off()
### Overall:
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1], med = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.5), q0.025 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.025), q0.975 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
plot(y~year, data = data, type = 'p',
log = "y", ylim = c(1, 160000),
xlab = "year", ylab = "lynx", xlim = c(1820,1971),
lwd = 0.5, cex = 0.2)
lines(pred_g1$med ~ pred_g1$year, type = 'l', col = "blue")
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
### MSE rMSE MAE:
test_data <- data[-c(1:80),]
mean((test_data$logy -pred_g1$med[-c(1:80)])^2)
# 1.249357
sqrt(mean((test_data$logy -pred_g1$med[-c(1:80)])^2))
# 1.117746
mean(abs(test_data$logy -pred_g1$med[-c(1:80)]))
# 0.903645
pred_g1$med
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1],
mean = apply((pred_g1_samps[,-1]), 1, mean),
med = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.5),
q0.025 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.025),
q0.975 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
plot(y~year, data = data, type = 'p',
log = "y", ylim = c(1, 160000),
xlab = "year", ylab = "lynx", xlim = c(1820,1971),
lwd = 0.5, cex = 0.2)
lines(pred_g1$med ~ pred_g1$year, type = 'l', col = "blue")
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
### Overall:
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1], med = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.5), q0.025 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.025), q0.975 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
plot(y~year, data = data, type = 'p',
log = "y", ylim = c(1, 160000),
xlab = "year", ylab = "lynx", xlim = c(1820,1971),
lwd = 0.5, cex = 0.2)
lines(pred_g1$med ~ pred_g1$year, type = 'l', col = "blue")
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1],
mean = apply((pred_g1_samps[,-1]), 1, mean),
med = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.5),
q0.025 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.025),
q0.975 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
### MSE rMSE MAE:
test_data <- data[-c(1:80),]
mean((test_data$logy -pred_g1$med[-c(1:80)])^2)
# 1.249357
sqrt(mean((test_data$logy -pred_g1$med[-c(1:80)])^2))
# 1.117746
mean(abs(test_data$logy -pred_g1$med[-c(1:80)]))
# 0.903645
set.seed(123)
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(tidyverse)
library(BayesGP)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
x <- data$x
y <- data$y
data_reduced <- data[1:80,]
### Region of prediction
region_lynx <- c(1821,1960)
### Define a prior on 50-years predictive SD:
pred_SD <- list(u = 0.5, alpha = 0.01)
results_sGP <- BayesGP::model_fit(
formula = y ~ f(x = year, model = "sgp", k = 100,
period = 10,
sd.prior = list(param = pred_SD, h = 50),
initial_location = "left", region = region_lynx) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))),
data = data_reduced,
family = "poisson")
### Forecast
pred_g1 <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T)
plot(pred_g1$mean ~ pred_g1$year, type = 'l', col = "blue", ylim = c(0,12))
# plot(pred_g1$q0.5 ~ pred_g1$year, type = 'l', col = "blue", ylim = c(0,12))
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
pred_g1_samps <- predict(results_sGP, newdata = data.frame(x = x, year = data$year), variable = "year", include.intercept = T, only.samples = T)
### Overall (Log):
pdf(file = paste0(figure_path, "lynx_log_predict.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
lines(mean~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
# lines(q0.5~year, data = pred_g1, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = pred_g1, col = 'red', lty = "dashed")
lines(q0.025~year, data = pred_g1, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
pdf(file = paste0(figure_path, "lynx_predict_samps.pdf"), height = 5, width = 5)
plot(y~year, log='y' ,data = data, type = 'p', xlab = "year", ylab = "lynx", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(5,50000) ) #ylim = c(0,15))
matlines(y = exp(pred_g1_samps[,2:102]), x = data$year, col = "#FF000010", lty = 1)
Nshow = 4
matlines(y = exp(pred_g1_samps[,seq(1,Nshow)]), x = data$year,
col = paste0(RColorBrewer::brewer.pal(Nshow,'Dark2'),"99"),
lty = 1)
dev.off()
### Overall:
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1], med = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.5), q0.025 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.025), q0.975 = apply(exp(pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
plot(y~year, data = data, type = 'p',
log = "y", ylim = c(1, 160000),
xlab = "year", ylab = "lynx", xlim = c(1820,1971),
lwd = 0.5, cex = 0.2)
lines(pred_g1$med ~ pred_g1$year, type = 'l', col = "blue")
lines(pred_g1$q0.975 ~ pred_g1$year, col = "red", lty = "dashed")
lines(pred_g1$q0.025 ~ pred_g1$year, col = "red", lty = "dashed")
pred_g1_samps <- predict(results_sGP, newdata = data.frame(year = data$year), variable = "year", include.intercept = T, only.samples = T)
pred_g1 <- data.frame(year = pred_g1_samps[,1],
mean = apply((pred_g1_samps[,-1]), 1, mean),
med = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.5),
q0.025 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.025),
q0.975 = apply((pred_g1_samps[,-1]), 1, quantile, probs = 0.975))
### MSE rMSE MAE:
test_data <- data[-c(1:80),]
mean((test_data$logy -pred_g1$med[-c(1:80)])^2)
# 0.9280063
sqrt(mean((test_data$logy -pred_g1$med[-c(1:80)])^2))
# 0.9633308
mean(abs(test_data$logy -pred_g1$med[-c(1:80)]))
# 0.7984736
set.seed(123)
#### PATH:
working_path <- getwd()
source_path <- paste0(working_path,"/source/")
figure_path <- paste0(working_path,"/figures/")
result_path <- paste0(working_path,"/results/")
library(tidyverse)
library(BayesGP)
library(sGPfit)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
x <- data$x
y <- data$y
data_reduced <- data[1:80,]
### Region of prediction
region_lynx <- c(1821,1960)
### Define a prior on the marginal SD:
pred_SD <- list(u = 0.5, alpha = 0.01)
p1 <- 10
## Forecast using the comparison
Customized_RE1 <- list()
Customized_RE1$compute_B <- function(x){
B <- Compute_B_B(x = x, k = 300, region = region_lynx, boundary = F, order = 4)
return(B)
}
Customized_RE1$compute_P <- function(x, const){
kappa1 = 2*pi/p1 + const
theta1 = 2*asin(2*pi/(kappa1*p1))/pi
scaling = sqrt(4 * cos(pi*theta1/2)*(kappa1^3))
Prec <- (1/(scaling^2))*sGPfit:::Compute_Q_B_compare(k = 300, kappa = kappa1, theta = theta1, order = 4, simp = F, region = region_lynx, boundary = F)
return(as(Prec, "matrix"))
}
plot(results_const$var, results_const$post, type = "o", xlab = "const", ylab = "post")
const_max = results_const$var[which.max(results_const$post)]
### Fit model:
fit_comparison_once <- function(const){
data_reduced2 <- data_reduced
kappa1 = 2*pi/p1 + const
theta1 = 2*asin(2*pi/(kappa1*p1))/pi
scaling = sqrt(4 * cos(pi*theta1/2)*(kappa1^3))
Customized_RE1 <- list()
Customized_RE1$compute_B <- function(x){
B <- Compute_B_B(x = x, k = 300, region = region_lynx, boundary = F, order = 4)
return(B)
}
Customized_RE1$compute_P <- function(x, kappa = kappa1, theta = theta1){
Prec <- (1/(scaling^2)) * sGPfit:::Compute_Q_B_compare(k = 300, kappa = kappa, theta = theta, order = 4, simp = F, region = region_lynx, boundary = F)
return(as(Prec, "matrix"))
}
results <- BayesGP::model_fit(
formula = y ~ f(x = year, model = "customized", sd.prior = list(param = pred_SD)) +
f(x = x, model = "IID", sd.prior = list(param = list(u = 1, alpha = 0.5))) ,
data = data_reduced2,
family = "poisson",
Customized_RE = Customized_RE1)
results
}
results_compare <- fit_comparison_once(const_max)
summary(results_compare)
year_vec <- data$year
full_design <- cbind(Customized_RE1$compute_B(x = year_vec), 1)
full_samps <- (full_design %*% results_compare$samps$samps[c(results_compare$random_samp_indexes$year, results_compare$fixed_samp_indexes$intercept), ])
full_summary <- list()
full_summary$year = year_vec
full_summary$mean <- (full_samps) %>% apply(1, mean)
full_summary$q0.5 <- (full_samps) %>% apply(1, median)
full_summary$q0.975 <- (full_samps) %>% apply(1, quantile, probs = 0.975)
full_summary$q0.025 <- (full_samps) %>% apply(1, quantile, probs = 0.025)
### Overall (Log):
pdf(file = paste0(figure_path, "lynx_log_predict_compare.pdf"), height = 5, width = 5)
plot(logy~year, data = data, type = 'p', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(0,15))
# lines(q0.5~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(mean~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
lines(q0.975~year, data = full_summary, col = 'red', lty = "dashed")
lines(q0.025~year, data = full_summary, col = 'red', lty = "dashed")
abline(v = 1900, col = "purple", lty = "dashed")
dev.off()
pdf(file = paste0(figure_path, "lynx_predict_compare_samps.pdf"), height = 5, width = 5)
plot(y~year, log='y' ,data = data, type = 'p', xlab = "year", ylab = "lynx", xlim = c(1820,1940), lwd = 0.5, cex = 1, ylim = c(5,50000) ) #ylim = c(0,15))
# lines(q0.5~year, data = full_summary, col = 'blue', xlab = "year", ylab = "lynx (log)", xlim = c(1820,1940))
# lines(q0.975~year, data = full_summary, col = 'red', lty = "dashed")
# lines(q0.025~year, data = full_summary, col = 'red', lty = "dashed")
matlines(y = exp(full_samps[,2:102]), x = year_vec, col = "#FF000010", lty = 1)
Nshow = 4
matlines(y = exp(full_samps[,seq(1,Nshow)]), x = year_vec,
col = paste0(RColorBrewer::brewer.pal(Nshow,'Dark2'),"99"),
lty = 1)
dev.off()
matplot(y = full_samps[,2:10], x = year_vec, type = "l", ylim = c(0,15))
### MSE and rMSE:
test_data <- data[-c(1:80),]
mean((test_data$logy - full_summary$mean[-c(1:80)])^2)
# 1.307196
sqrt(mean((test_data$logy - full_summary$mean[-c(1:80)])^2))
# 1.143327
mean(abs((test_data$logy - full_summary$mean[-c(1:80)])))
# 0.9549982
