knitr::opts_chunk$set(echo = TRUE)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log10(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
require(sGPfit)
require(aghq)
require(TMB)
require(tidyverse)
require(Matrix)
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0,0))
knitr::opts_chunk$set(echo = TRUE)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log10(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
require(sGPfit)
require(aghq)
require(TMB)
require(tidyverse)
require(Matrix)
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0,0))
B2 <- Compute_B_sB(x = data$x, a = a, region = range(data$x), k = 30)
B2 <- as(B2,"dgTMatrix")
Q2 <- Compute_Q_sB(a = a, k = 30, region = range(data$x))
Q2 <- as(as(Q2, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B2,
X = X,
# Precision matrix
P = Q2,
logPdet = as.numeric(determinant(Q2, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B2) + ncol(X)))),
theta = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
tmbdat <- list(
# Design matrix
B = B2,
X = X,
# Precision matrix
P = Q2,
logPdet = as.numeric(determinant(Q2, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B2) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod_sB <- aghq::marginal_laplace_tmb(ff,5,c(0,0))
## Posterior samples:
samps1 <- sample_marginal(fitted_mod, M = 3000)
g_samps <- B %*% samps1$samps[1:ncol(B),] + X %*% samps1$samps[(ncol(B) + 1):(ncol(B) + ncol(X)),]
## Posterior summary:
mean <- apply(as.matrix(g_samps), MARGIN = 1, mean)
upper <- apply(as.matrix(g_samps), MARGIN = 1, quantile, p = 0.975)
lower <- apply(as.matrix(g_samps), MARGIN = 1, quantile, p = 0.025)
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3.1,9))
lines(upper ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean ~ data$x, type = "l", col = "blue")
lines(lower ~ data$x, type = "l", col = "red", lty = "dashed")
## Posterior of the SD parameter:
prec_marg <- fitted_mod$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
## Posterior samples:
samps2 <- sample_marginal(fitted_mod_sB, M = 3000)
g_samps_2 <- B2 %*% samps2$samps[1:ncol(B2),] + X %*% samps2$samps[(ncol(B2) + 1):(ncol(B2) + ncol(X)),]
## Posterior summary:
mean2 <- apply(as.matrix(g_samps_2), MARGIN = 1, mean)
upper2 <- apply(as.matrix(g_samps_2), MARGIN = 1, quantile, p = 0.975)
lower2 <- apply(as.matrix(g_samps_2), MARGIN = 1, quantile, p = 0.025)
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3.1,9))
lines(upper2 ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean2 ~ data$x, type = "l", col = "blue")
lines(lower2 ~ data$x, type = "l", col = "red", lty = "dashed")
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
## Posterior of the Overdispersion parameter:
prec_marg <- fitted_mod_sB$marginals[[2]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "Overdispersion", ylab = "Post")
## Posterior of the Overdispersion parameter:
prec_marg <- fitted_mod$marginals[[2]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "Overdispersion", ylab = "Post")
